<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Content Manager</title>
</head>
<body>
  <link rel="preload" href="https://fonts.gstatic.com/s/nunito/v16/XRXW3I6Li01BKofAnsSUYevIWzgPDA.woff2" as="font"
    type="font/woff2" crossorigin />
  <link rel="preload" href="https://fonts.gstatic.com/s/nunito/v16/XRXV3I6Li01BKofINeaBTMnFcQ.woff2" as="font"
    type="font/woff2" crossorigin />
  <script src="https://unpkg.com/netlify-cms@2.10.192/dist/netlify-cms.js"></script>
  <script>
    (() => {
      CMS.registerPreviewStyle("/admin/base-preview.css");
      CMS.registerPreviewStyle("/admin/news-preview.css");
      CMS.registerPreviewStyle("/admin/magazin-preview.css");
      CMS.registerPreviewStyle("/admin/blog-preview.css");

      const staff = JSON.parse(`{{ staff | jsonify | safe }}`);

      const NewsPreview = createClass({
        render: function () {
          const { entry, widgetFor, getAsset } = this.props;
          const slug = window.location.hash.replace('#/collections/news/entries/', '').replace('/index', '');
          const authorId = entry.getIn(['data', 'author']) || 'lstrasser';
          const title = entry.getIn(['data', 'title']);
          const categories = (entry.getIn(['data', 'categories']) || []);
          const publishDate = entry.getIn(['data', 'publishDate']) ? new Date(entry.getIn(['data', 'publishDate'])) : new Date();
          const coverImage = entry.getIn(['data', 'cover']) || '';
          const coverImageUrl = coverImage.includes('/') ? getAsset(coverImage) : `/news/${slug}/${coverImage}`;

          return h('div', { className: 'main single news-preview' },
            h('article', {},
              h('div', { className: 'layout horizontal' },
                h('div', { className: 'stretch article-categories' }, categories.map((category) => h('div', {}, category))),
                h('div', { className: 'article-date'}, publishDate.toLocaleDateString("de-DE", { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })),
              ),
              h('div', { className: 'layout horizontal heading' },
                h('h1', { className: 'stretch' }, title),
                h('div', { className: 'layout horizontal center-aligning article-author' },
                  h('img', { src: staff[authorId].image, className: 'article-author-image' }),
                  h('div', { className: 'stretch' },
                    h('div', { className: 'article-author-name' }, staff[authorId].name),
                    h('div', { className: 'article-author-title' }, staff[authorId].title),
                  ),
                ),
              ),
              h('div', { className: 'article-cover-wrapper' },
                h('img', { src: coverImageUrl, className: 'article-cover' }),
              ),
              h('div', { className: 'article-content' }, widgetFor('body')),
            )
          );
        }
      });

      const MagazinPreview = createClass({
        render: function () {
          const { entry, widgetFor, getAsset } = this.props;
          const slug = window.location.hash.replace('#/collections/magazin/entries/', '').replace('/index', '');
          const authorId = entry.getIn(['data', 'author']) || 'lstrasser';
          const title = entry.getIn(['data', 'title']);
          const magazinCategories = (entry.getIn(['data', 'magazinCategories']) || []);
          if (magazinCategories.length === 0) {
            magazinCategories.push('Sonstiges');
          }
          const publishDate = entry.getIn(['data', 'publishDate']) ? new Date(entry.getIn(['data', 'publishDate'])) : new Date();
          const coverImage = entry.getIn(['data', 'cover']) || '';
          const coverImageUrl = coverImage.includes('/') ? getAsset(coverImage) : `/magazin/${slug}/${coverImage}`;

          return h('div', { className: 'main single magazin-preview' },
            h('article', { className: 'main-article' },
              h('div', { className: 'layout horizontal meta-data' },
                h('div', { className: 'stretch article-categories' }, magazinCategories.map((category) => h('div', {}, category))),
                h('div', { className: 'article-date'}, publishDate.toLocaleDateString("de-DE", { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })),
              ),
              h('div', { className: 'layout horizontal heading' },
                h('h1', { className: 'stretch' }, title),
                h('div', { className: 'layout horizontal center-aligning article-author' },
                  h('img', { src: staff[authorId].image, className: 'article-author-image' }),
                  h('div', { className: 'stretch' },
                    h('div', { className: 'article-author-name' }, staff[authorId].name),
                    h('div', { className: 'article-author-title' }, staff[authorId].title),
                  ),
                ),
              ),
              h('div', { className: 'article-cover-wrapper' },
                h('img', { src: coverImageUrl, className: 'article-cover' }),
              ),
              h('div', { className: 'article-content' }, widgetFor('body')),
            )
          );
        }
      });

      const BlogPreview = createClass({
        render: function () {
          const { entry, widgetFor, getAsset } = this.props;
          const slug = window.location.hash.replace('#/collections/blog/entries/', '').replace('/index', '');
          const title = entry.getIn(['data', 'title']);
          const publishDate = entry.getIn(['data', 'publishDate']) ? new Date(entry.getIn(['data', 'publishDate'])) : new Date();
          const coverImage = entry.getIn(['data', 'cover']) || '';
          const coverImageUrl = coverImage.includes('/') ? getAsset(coverImage) : `/blog/${slug}/${coverImage}`;

          return h('div', { className: 'main-layout blog-preview' },
            h('div', {},
              h('article', {},
                h('div', { className: 'narrow' },
                  h('div', { className: 'breadcrumbs' },
                    h('nav', {},
                      h('ul', { className: 'center-aligning horizontal wrapping layout' },
                        h('li', {},
                          h('a', { href: '#' },
                            h('i', { className: 'fal fa-scroll' }),
                            h('span', {}, 'Testing')
                          ),
                          h('span', { className: 'subtle' }, '&nbsp;&nbsp;/&nbsp;&nbsp;'),
                        ),
                      ),
                    ),
                  ),
                ),
                h('div', {},
                  h('div', { className: 'cover' },
                    h('div', { className: 'golden-ratio thumbnail-img' },
                      h('img', { src: coverImageUrl, className: 'cover-parent' }),
                    ),
                  ),
                  h('h1', {},
                    h('span', {}, title)
                  ),
                ),
                h('p', { className: 'subtle'}, publishDate.toLocaleDateString("de-DE", { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })),
                h('div', {}, widgetFor('body')),
              )
            )
          );
        }
      });

      CMS.registerPreviewTemplate("news", NewsPreview);
      CMS.registerPreviewTemplate("magazin", MagazinPreview);
      CMS.registerPreviewTemplate("blog", BlogPreview);

      CMS.registerEditorComponent({
        id: 'figure',
        label: 'Figure',
        fields: [
          {
            name: 'caption',
            label: 'Caption',
            widget: 'string',
            required: false,
          },
          {
            name: 'extraClass',
            label: 'Class',
            widget: 'string',
            required: false,
          },
          {
            name: 'body',
            label: 'HTML',
            widget: 'text',
            required: true,
          }
        ],
        pattern: /^<figure class="(.*?)">$(.*?)^<figcaption>(.*?)<\/figcaption>$^<\/figure>$/ms,
        fromBlock: function (match) {
          return {
            extraClass: match[1],
            body: match[2],
            caption: match[3],
          };
        },
        toBlock: function (data) {
          return `
  <figure class="${data.extraClass}">
    ${data.body}
    <figcaption>${data.caption}</figcaption>
  </figure>
  `;
        },
        toPreview: function (data) {
          return `
    <figure class="${data.extraClass}">
      ${data.body}
      <figcaption>${data.caption}</figcaption>
    </figure>
    `;
        }
      });
    })();
  </script>
  <script src="https://kit.fontawesome.com/b11eabbb32.js" crossorigin="anonymous" async></script>
</body>
</html>
