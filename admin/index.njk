<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Content Manager</title>
</head>
<body>
  <link rel="preload" href="https://fonts.gstatic.com/s/nunito/v16/XRXW3I6Li01BKofAnsSUYevIWzgPDA.woff2" as="font"
    type="font/woff2" crossorigin />
  <link rel="preload" href="https://fonts.gstatic.com/s/nunito/v16/XRXV3I6Li01BKofINeaBTMnFcQ.woff2" as="font"
    type="font/woff2" crossorigin />
  <script src="https://unpkg.com/netlify-cms@2.10.192/dist/netlify-cms.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/markdown-it/13.0.1/markdown-it.min.js" integrity="sha512-SYfDUYPg5xspsG6OOpXU366G8SZsdHOhqk/icdrYJ2E/WKZxPxze7d2HD3AyXpT7U22PZ5y74xRpqZ6A2bJ+kQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <script>
    (() => {
      const md = window.markdownit({
        html: true,
      });

      CMS.registerPreviewStyle("/admin/base-preview.css");
      CMS.registerPreviewStyle("/admin/news-preview.css");
      CMS.registerPreviewStyle("/admin/blog-preview.css");
      CMS.registerPreviewStyle("/admin/blog-preview.css");
      CMS.registerPreviewStyle("/admin/hilfe-preview.css");
      CMS.registerPreviewStyle("/admin/funktionen-preview.css");

      const staff = JSON.parse(`{{ staff | jsonify | safe }}`);

      const NewsPreview = createClass({
        render: function () {
          const { entry, widgetFor, getAsset } = this.props;
          const authorId = entry.getIn(['data', 'author']) || 'lstrasser';
          const title = md.renderInline(entry.getIn(['data', 'title']) || '');
          const categories = (entry.getIn(['data', 'categories']) || []);
          const publishDate = entry.getIn(['data', 'publishDate']) ? new Date(entry.getIn(['data', 'publishDate'])) : new Date();
          const coverImage = entry.getIn(['data', 'cover']) || '';
          const coverImageUrl = getAsset(coverImage);

          return h('div', { className: 'main single news-preview' },
            h('article', {},
              h('div', { className: 'layout horizontal' },
                h('div', { className: 'stretch article-categories' }, categories.map((category) => h('div', {}, category))),
                h('div', { className: 'article-date'}, publishDate.toLocaleDateString("de-DE", { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })),
              ),
              h('div', { className: 'layout horizontal heading' },
                h('h1', { className: 'stretch', dangerouslySetInnerHTML: { __html: title } }),
                h('div', { className: 'layout horizontal center-aligning article-author' },
                  h('img', { src: staff[authorId].image, className: 'article-author-image' }),
                  h('div', { className: 'stretch' },
                    h('div', { className: 'article-author-name' }, staff[authorId].name),
                    h('div', { className: 'article-author-title' }, staff[authorId].title),
                  ),
                ),
              ),
              h('div', { className: 'article-cover-wrapper' },
                h('img', { src: coverImageUrl, className: 'article-cover' }),
              ),
              h('div', { className: 'article-content' }, widgetFor('body')),
            )
          );
        }
      });

      const MagazinPreview = createClass({
        render: function () {
          const { entry, widgetFor, getAsset } = this.props;
          const authorId = entry.getIn(['data', 'author']) || 'lstrasser';
          const title = md.renderInline(entry.getIn(['data', 'title']) || '');
          const categories = (entry.getIn(['data', 'categories']) || []);
          if (categories.length === 0) {
            categories.push('Sonstiges');
          }
          const publishDate = entry.getIn(['data', 'publishDate']) ? new Date(entry.getIn(['data', 'publishDate'])) : new Date();
          const coverImage = entry.getIn(['data', 'cover']) || '';
          const coverImageUrl = getAsset(coverImage);

          return h('div', { className: 'main single blog-preview' },
            h('article', { className: 'main-article' },
              h('div', { className: 'layout horizontal meta-data' },
                h('div', { className: 'stretch article-categories' }, categories.map((category) => h('div', {}, category))),
                h('div', { className: 'article-date'}, publishDate.toLocaleDateString("de-DE", { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })),
              ),
              h('div', { className: 'layout horizontal heading' },
                h('h1', { className: 'stretch', dangerouslySetInnerHTML: { __html: title } }),
                h('div', { className: 'layout horizontal center-aligning article-author' },
                  h('img', { src: staff[authorId].image, className: 'article-author-image' }),
                  h('div', { className: 'stretch' },
                    h('div', { className: 'article-author-name' }, staff[authorId].name),
                    h('div', { className: 'article-author-title' }, staff[authorId].title),
                  ),
                ),
              ),
              h('div', { className: 'article-cover-wrapper' },
                h('img', { src: coverImageUrl, className: 'article-cover' }),
              ),
              h('div', { className: 'article-content' }, widgetFor('body')),
            )
          );
        }
      });

      const BlogPreview = createClass({
        render: function () {
          const { entry, widgetFor, getAsset } = this.props;
          const title = md.renderInline(entry.getIn(['data', 'title']) || '');
          const publishDate = entry.getIn(['data', 'publishDate']) ? new Date(entry.getIn(['data', 'publishDate'])) : new Date();
          const coverImage = entry.getIn(['data', 'cover']) || '';
          const coverImageUrl = getAsset(coverImage);

          return h('div', { className: 'main-layout blog-preview' },
            h('div', {},
              h('article', {},
                h('div', { className: 'narrow' },
                  h('div', { className: 'breadcrumbs' },
                    h('nav', {},
                      h('ul', { className: 'center-aligning horizontal wrapping layout' },
                        h('li', {},
                          h('a', { href: '#' },
                            h('i', { className: 'fal fa-scroll' }),
                            h('span', {}, 'Testing')
                          ),
                          h('span', { className: 'subtle' }, '  /  '),
                        ),
                      ),
                    ),
                  ),
                ),
                h('div', {},
                  h('div', { className: 'cover' },
                    h('div', { className: 'golden-ratio thumbnail-img' },
                      h('img', { src: coverImageUrl, className: 'cover-parent' }),
                    ),
                  ),
                  h('h1', {},
                    h('span', { dangerouslySetInnerHTML: { __html: title } })
                  ),
                ),
                h('p', { className: 'subtle'}, publishDate.toLocaleDateString("de-DE", { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })),
                h('div', {}, widgetFor('body')),
              )
            )
          );
        }
      });

      const HilfePreview = createClass({
        render: function () {
          const { entry, widgetFor } = this.props;
          const title = md.renderInline(entry.getIn(['data', 'title']) || '');
          const icon = entry.getIn(['data', 'icon']) || 'scroll';

          return h('div', { className: 'main-layout hilfe-preview' },
            h('div', {},
              h('div', { className: 'breadcrumbs' },
                h('nav', {},
                  h('ul', { className: 'center-aligning horizontal wrapping layout' },
                    h('li', {},
                      h('a', { href: '#' },
                        h('i', { className: 'fal fa-scroll' }),
                        h('span', {}, 'Testing')
                      ),
                      h('span', { className: 'subtle' }, '  /  '),
                    ),
                  ),
                ),
              ),
            ),
            h('article', {},
              h('i', { className: `cover-icon fal fa-${icon}` }),
              h('h1', {}, title),
              h('div', {}, widgetFor('body')),
            ),
          );
        }
      });

      const FunktionenPreview = createClass({
        render: function () {
          const { entry, widgetFor } = this.props;
          const title = md.renderInline(entry.getIn(['data', 'title']) || '');
          const subtitle = md.renderInline(entry.getIn(['data', 'subtitle']) || '');
          const subsubtitle = md.renderInline(entry.getIn(['data', 'subsubtitle']) || '');
          const description = md.renderInline(entry.getIn(['data', 'description']) || '');
          const cover = entry.getIn(['data', 'cover']);
          const cover_2 = entry.getIn(['data', 'cover_2']);
          const sections = entry.getIn(['data', 'sections']) || [];

          return h('div', { className: 'funktionen-preview' },
            h('section', { className: 'hero blue', dataSection: 'hero' },
              h('div', { className: 'inner' },
                h('div', { className: 'content' },
                  h('h1', { className: 'blue text-clip', dangerouslySetInnerHTML: { __html: title } }),
                  h('h2', { dangerouslySetInnerHTML: { __html: subtitle } }),
                  h('h3', { className: 'red text-clip', dangerouslySetInnerHTML: { __html: subsubtitle } }),
                  h('div', { dangerouslySetInnerHTML: { __html: description } }),
                  h('div', { className: 'buttons' },
                    h('a', { className: 'btn highlight get-started', href: '#preise' },
                      h('span', {}, 'Jetzt Kennenlernen'),
                      h('span', { className: 'icon fas fa-play-circle' }, ''),
                    ),
                  ),
                ),
                h('div', { className: 'images' },
                  h('div', { className: 'scaler' },
                    h('div', { className: 'image' },
                      h('img', { src: cover }),
                      cover_2 ? h('img', { src: cover_2 }) : null,
                    ),
                  ),
                ),
              ),
            ),
            sections.map((sectionInWeirdObjectFormat) => {
              const section = JSON.parse(JSON.stringify(sectionInWeirdObjectFormat));

              const sectionTitle = md.renderInline(section.title || '');
              const sectionSubtitle = md.renderInline(section.subtitle || '');
              const sectionText = md.renderInline(section.text || '');

              const slides = (section.slides || []);
              const images = (section.images || []);

              switch (section.template) {
                case 'section-slides':
                  if (section.alignment === 'right') {
                    slides.reverse();
                  }

                  return h('section', {
                      className: `section-slides ${section.alignment || ''}`,
                      style: {
                        '--color-highlight': `var(--${ section.color_1 })`,
                        '--color-highlight-bg': `var(--${ section.color_2 })`,
                      },
                      dataAnimation: 'slide_1',
                      dataAnimation_direction: section.alignment === 'right' ? 'reverse' : 'normal',
                    },
                    h('div', { className: 'inner' },
                      h('div', { className: 'content' },
                        h('h2', { dangerouslySetInnerHTML: { __html: sectionTitle } }),
                        sectionSubtitle ? h('h3', { dangerouslySetInnerHTML: { __html: sectionSubtitle } }) : null,
                        h('div', { dangerouslySetInnerHTML: { __html: sectionText } }),
                        h('ul', { className: 'tabs' },
                          slides.map((slide, index) => {
                            const slideTitle = md.renderInline(slide.title || '');
                            const slideText = md.renderInline(slide.text || '');

                            return h('li', { className: 'tab-outer' },
                              h('div', { className: 'tab', dataSlide: index, role: 'presentation' },
                                h('div', { className: 'tab-inner', role: 'presentation' },
                                  h('i', { className: 'tab-expand-icon fal fa-arrow-right' }),
                                  h('h4', {},
                                    h('i', { className: `fal fa-${slide.icon}` }),
                                    h('div', { dangerouslySetInnerHTML: { __html: slideTitle } }),
                                  ),
                                  h('div', { dangerouslySetInnerHTML: { __html: slideText } }),
                                ),
                              ),
                            );
                          }),
                        ),
                      ),
                      h('div', { className: 'images' },
                        h('div', { className: 'scaler' },
                          h('div', { className: 'images-inner' },
                            h('div', { className: 'slides' },
                              h('div', { className: 'slides-inner' },
                                h('div', { style: { width: '100%', pointerEvents: 'none' } }),
                                slides.map((slide, index) => {
                                  const slideTitle = md.renderInline(slide.title || '');
                                  const slideText = md.renderInline(slide.text || '');

                                  return h('div', { className: 'slides-slide', dataSlide: index },
                                    h('div', { className: 'slides-slide-inner' },
                                      h('img', { className: 'animate', loading: 'lazy', src: slide.image }),
                                    ),
                                  );
                                }),
                                h('div', { style: { width: '100%', pointerEvents: 'none' } }),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  );
                break;
                case 'section-waterfall':
                  return h('section', {
                      className: `section-waterfall ${section.alignment || ''}`,
                      style: {
                        '--color-highlight': `var(--${ section.color_1 })`,
                        '--color-highlight-bg': `var(--${ section.color_2 })`,
                      },
                      dataAnimation: 'slide_1',
                    },
                    h('div', { className: 'inner' },
                      h('div', { className: 'content' },
                        h('h2', { dangerouslySetInnerHTML: { __html: sectionTitle } }),
                        sectionSubtitle ? h('h3', { dangerouslySetInnerHTML: { __html: sectionSubtitle } }) : null,
                        h('div', { dangerouslySetInnerHTML: { __html: sectionText } }),
                        h('ul', { className: 'tabs' },
                          slides.map((slide) => {
                            const slideTitle = md.renderInline(slide.title || '');
                            const slideText = md.renderInline(slide.text || '');

                            return h('li', { className: 'tab-outer' },
                              h('div', { className: 'tab', role: 'presentation' },
                                h('div', { className: 'tab-inner', role: 'presentation' },
                                  h('i', { className: 'tab-expand-icon fal fa-arrow-right' }),
                                  h('h4', {},
                                    h('i', { className: `fal fa-${slide.icon}` }),
                                    h('div', { dangerouslySetInnerHTML: { __html: slideTitle } }),
                                  ),
                                  h('div', { dangerouslySetInnerHTML: { __html: slideText } }),
                                ),
                              ),
                            );
                          }),
                        ),
                      ),
                      h('div', { className: 'images' },
                        h('div', { className: 'scaler' },
                          h('div', { className: 'images-inner' },
                            images.map((image) => {
                              return h('img', { className: 'animate', src: image.src, style: { padding: image.padding } });
                            }),
                          ),
                        ),
                      ),
                    ),
                  );
                break;
                default:
                  return h('div', {}, `UNKOWN SECTION TEMPLATE: ${section.template}`);
              }
            }),
          );
        }
      });

      CMS.registerPreviewTemplate("news", NewsPreview);
      CMS.registerPreviewTemplate("blog", MagazinPreview);
      CMS.registerPreviewTemplate("blog", BlogPreview);
      CMS.registerPreviewTemplate("hilfe", HilfePreview);
      CMS.registerPreviewTemplate("funktionen", FunktionenPreview);

      CMS.registerEditorComponent({
        id: 'figure',
        label: 'Figure',
        fields: [
          {
            name: 'caption',
            label: 'Caption',
            widget: 'string',
            required: false,
          },
          {
            name: 'extraClass',
            label: 'Class',
            widget: 'select',
            required: false,
            multiple: true,
            options: ['border', 'float-right', 'float-left', 'centered', 'width-25pc', 'narrow', 'width-30pc', 'width-40pc', 'float', 'right', 'left'],
          },
          {
            name: 'body',
            label: 'HTML',
            widget: 'markdown',
            required: true,
          }
        ],
        pattern: /^<figure class="(.*?)">(.*?)<figcaption>(.*?)<\/figcaption>(?:.*?)<\/figure>$/ms,
        fromBlock: function (match) {
          return {
            extraClass: (match[1] || '').split(','),
            body: match[2] || '',
            caption: match[3] || '',
          };
        },
        toBlock: function (data) {
          const bodyHtml = md.renderInline(data.body || '').replace(/\n/g, '');
          return `<figure class="${(data.extraClass || []).join(' ')}">${bodyHtml}<figcaption>${data.caption || ''}</figcaption></figure>`;
        },
        toPreview: function (data) {
          const bodyHtml = md.renderInline(data.body || '').replace(/\n/g, '');
          return `<figure class="${(data.extraClass || []).join(' ')}">${bodyHtml}<figcaption>${data.caption || ''}</figcaption></figure>`;
        }
      });
    })();
  </script>
  <script src="https://kit.fontawesome.com/b11eabbb32.js" crossorigin="anonymous" async></script>
</body>
</html>
